from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.ua_states import OrderStates

router = Router()

# üìÜ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–µ–ª—å (–≤–∑—è—Ç—ã–π –∏–∑ —Å–∫—Ä–∏–Ω–∞)
WEEKS = [
    ("–¢–∏–∂–¥–µ–Ω—å 1", "01.09.2025 ‚Äì 05.09.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 2", "08.09.2025 ‚Äì 12.09.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 3", "15.09.2025 ‚Äì 19.09.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 4", "22.09.2025 ‚Äì 26.09.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 5", "29.09.2025 ‚Äì 03.10.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 6", "06.10.2025 ‚Äì 10.10.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 7", "13.10.2025 ‚Äì 17.10.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 8", "20.10.2025 ‚Äì 24.10.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 9", "27.10.2025 ‚Äì 31.10.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 10", "03.11.2025 ‚Äì 07.11.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 11", "10.11.2025 ‚Äì 14.11.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 12", "17.11.2025 ‚Äì 21.11.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 13", "24.11.2025 ‚Äì 28.11.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 14", "01.12.2025 ‚Äì 05.12.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 15", "08.12.2025 ‚Äì 12.12.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 16", "15.12.2025 ‚Äì 19.12.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 17", "22.12.2025 ‚Äì 26.12.2025"),
    ("–¢–∏–∂–¥–µ–Ω—å 18", "29.12.2025 ‚Äì 31.12.2025"),
]

DAYS = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è"]

MEALS = ["–°–Ω—ñ–¥–∞–Ω–æ–∫ —Å–æ–ª–æ–Ω–∏–π", "–°–Ω—ñ–¥–∞–Ω–æ–∫ —Å–æ–ª–æ–¥–∫–∏–π", "–û–±—ñ–¥", "–ü–æ–ª—É–¥–µ–Ω–æ–∫"]


@router.message(F.text.casefold() == "–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def start_order(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    for i, (label, _) in enumerate(WEEKS):
        builder.button(text=label, callback_data=f"week_{i}")
    builder.adjust(2)
    await state.set_state(OrderStates.choosing_week)
    await message.answer("üìÜ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("week_"), OrderStates.choosing_week)
async def week_chosen(callback: CallbackQuery, state: FSMContext):
    week_index = int(callback.data.split("_")[1])
    await state.update_data(week=WEEKS[week_index][0])
    builder = InlineKeyboardBuilder()
    for i, day in enumerate(DAYS):
        builder.button(text=day, callback_data=f"day_{i}")
    builder.adjust(1)
    await state.set_state(OrderStates.choosing_day)
    await callback.message.edit_text(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: {WEEKS[week_index][0]}\n–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:")
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("day_"), OrderStates.choosing_day)
async def day_chosen(callback: CallbackQuery, state: FSMContext):
    day_index = int(callback.data.split("_")[1])
    await state.update_data(day=DAYS[day_index])
    builder = InlineKeyboardBuilder()
    for i, meal in enumerate(MEALS):
        builder.button(text=meal, callback_data=f"meal_{i}")
    builder.adjust(1)
    await state.set_state(OrderStates.choosing_meal)
    await callback.message.edit_text(
        f"–î–µ–Ω—å: {DAYS[day_index]}\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–π–æ–º —ó–∂—ñ:")
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("meal_"), OrderStates.choosing_meal)
async def meal_chosen(callback: CallbackQuery, state: FSMContext):
    meal_index = int(callback.data.split("_")[1])
    meal = MEALS[meal_index]
    await state.update_data(meal=meal)
    data = await state.get_data()
    builder = InlineKeyboardBuilder()
    builder.button(text="–¢–∞–∫", callback_data="confirm_yes")
    builder.button(text="–ù—ñ", callback_data="confirm_no")
    builder.adjust(2)
    await state.set_state(OrderStates.confirming)
    await callback.message.edit_text(
        "\n".join([
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
            f"–¢–∏–∂–¥–µ–Ω—å: {data['week']}",
            f"–î–µ–Ω—å: {data['day']}",
            f"–•–∞—Ä—á—É–≤–∞–Ω–Ω—è: {meal}",
        ])
    )
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_"), OrderStates.confirming)
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    if callback.data == "confirm_yes":
        data = await state.get_data()
        await callback.message.edit_text(
            "\n".join([
                "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:",
                f"–¢–∏–∂–¥–µ–Ω—å: {data['week']}",
                f"–î–µ–Ω—å: {data['day']}",
                f"–•–∞—Ä—á—É–≤–∞–Ω–Ω—è: {data['meal']}",
            ])
        )
    else:
        await callback.message.edit_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.clear()
    await callback.answer()
